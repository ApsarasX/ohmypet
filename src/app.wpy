<style lang="scss">
.container {
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy';
import 'wepy-async-function';
import { setStore } from 'wepy-redux';
import configStore from './store';
import { request } from './lib';

const store = configStore();
setStore(store);

export default class extends wepy.app {
    config = {
        pages: [
            'pages/msg',
            'pages/index',
            'pages/msg-list',
            'pages/profile',
            'pages/house',
            'pages/pets',
            'pages/add-pet',
            'pages/login'
        ],
        window: {
            backgroundTextStyle: 'light',
            navigationBarBackgroundColor: '#FA6650',
            navigationBarTitleText: '小宠爱',
            navigationBarTextStyle: 'white'
        },
        tabBar: {
            color: '#808080',
            selectedColor: '#FA6650',
            borderStyle: 'black',
            list: [
                {
                    pagePath: 'pages/index',
                    text: '寄养',
                    iconPath: 'assets/images/earth-0.png',
                    selectedIconPath: 'assets/images/earth-1.png'
                },
                {
                    pagePath: 'pages/msg-list',
                    text: '消息',
                    iconPath: 'assets/images/chat-0.png',
                    selectedIconPath: 'assets/images/chat-1.png'
                },
                {
                    pagePath: 'pages/profile',
                    text: '我的',
                    iconPath: 'assets/images/me-0.png',
                    selectedIconPath: 'assets/images/me-1.png'
                }
            ]
        }
    };
    globalData = {
        // 登录状态
        hasLogin: false,
        openid: ''
    };

    constructor() {
        super();
        this.use('requestfix');
        this.use('promisify');
    }

    onLaunch() {
        // 小程序启动时, 先尝试本地获取openid, 本地没有则向服务器请求
        const openid = wepy.getStorageSync('openid');
        if (openid && openid.length !== 0) {
            this.globalData.openid = openid;
            this.globalData.hasLogin = true;
        } else {
            this.login();
        }
        this.getUserLocation();
    }
    /**
     * @function login 向服务器发起登录请求
     * @return {void}
     */
    async login() {
        const codeRes = await wepy.login();
        if (codeRes.errMsg === 'login:ok') {
            try {
                const res = await request('http://xiao.pet/api/auth/login/wechat', 'POST', {
                    code: codeRes.code
                });
                if (res.code === 0) {
                    this.globalData.hasLogin = true;
                    this.globalData.openid = res.data.openid;
                    wepy.setStorageSync('openid', res.data.openid);
                    // 第一次登陆后如果返回的用户信息 nickname === null
                    if (res.data.nickname === null) {
                        await this.fillUserInfo();
                    }
                }
            } catch (e) {
                console.log(e.message);
            }
        }
    }

    /**
     * @function fillUserInfo 向服务器补充用户信息
     */
    async fillUserInfo() {
        const { avatarUrl: avatar, nickName: nickname } = await this.getUserInfo();
        try {
            const res = await request('http://xiao.pet/api/user/info/fill', 'POST', {
                openid: this.globalData.openid,
                nickname,
                avatar
            });
            if (res.code === 0) {
                console.log('补充用户信息完成');
            } else {
                console.log('补充用户信息失败');
            }
        } catch (e) {
            console.log(e.message);
        }
    }

    /**
     * @function getCode 调用wx.login获取code准备向服务器发起登录请求
     * @return {Promise} 临时登录凭证code
     */
    // getCode() {
    //     return new Promise((resolve, reject) => {
    //         wx.login({
    //             success(res) {
    //                 resolve(res);
    //             },
    //             fail() {
    //                 reject(new Error('login fail'));
    //             }
    //         });
    //     });
    // }

    /**
     * @function getUserInfo 获取用户信息
     * @return {Promise(Object)} 用户信息对象
     */
    getUserInfo() {
        const that = this;
        if (this.globalData.userInfo) {
            return this.globalData.userInfo;
        }
        return new Promise((resolve, reject) => {
            wepy.getUserInfo({
                success(res) {
                    that.globalData.userInfo = res.userInfo;
                    resolve(res.userInfo);
                },
                fail() {
                    reject(new Error('get user info fail'));
                }
            });
        });
    }
    // 获得用户地理位置
    getUserLocation() {
        const that = this;
        if (this.globalData.userLocation) {
            return this.globalData.userLocation;
        }
        return new Promise((resolve, reject) => {
            wepy.getLocation({
                success(res) {
                    const userLocation = {
                        latitude: res.latitude,
                        longitude: res.longitude,
                        altitude: res.altitude
                    };
                    that.globalData.userLocation = userLocation;
                    resolve(userLocation);
                },
                fail() {
                    reject(new Error('get user location fail'));
                }
            });
        });
    }

    isFirstLogin() {}
}
</script>
